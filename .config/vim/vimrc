set nocompatible
set ttyfast

" Tabs, spaces, indentation, wrapping
set expandtab                           " use spaces for tabs
set tabstop=4                           " number of spaces to use for tabs
set shiftwidth=4                        " number of spaces to autoindent
set softtabstop=4                       " number of spaces for a tab
set autoindent                          " set autoindenting on
set smartindent                         " automatically insert another level of indent when needed
if has('breakindent')                   " not available before 7.4.338, see https://retracile.net/blog/2014/07/18/18.00
    set breakindent                     " autoindent wrapped lines, see https://retracile.net/wiki/VimBreakIndent
    autocmd FileType python,c,cpp setlocal breakindentopt=shift:4    " shift wrapped lines another 4 chars
endif
set linebreak                           " break at character in 'breakat' rather than at the last character that fits on the screen
set backspace=indent,eol,start          " more flexible backspace
"retab                                   " spaces instead of tabs
set list                                " apply highlighting as per listchars
"set listchars=tab:␉·,trail:␠,nbsp:⎵     " highlighting of special white-space characters
set listchars=tab:»·,trail:·            " highlighting of special white-space characters

" Backup
set nobackup                            " don't backup files
set nowritebackup
set noswapfile

" Searching
set hlsearch                            " highlight search terms
set incsearch                           " show search matches as you type
set ignorecase                          " ignore case when searching
set smartcase                           " make searches case sensitive only if they contain uppercase stuff

" Encoding
set encoding=utf-8                      " use utf-8 everywhere
set fileencoding=utf-8                  " use utf-8 everywhere
set termencoding=utf-8                  " use utf-8 everywhere

" Various
set ruler                               " show the cursor position
set scrolloff=5                         " show 5 lines above/below the cursor when scrolling
set number                              " show numbers
set showcmd                             " shows the command in the last line of the screen
set autoread                            " read files when they've been changed outside of Vim
set showmatch                           " matching brackets & the like
set tabpagemax=25                       " max number of tabs that can be opened with '-p' option
set fillchars="fold:\ "                 " fill fold lines with spaces instead of dashes

set history=500                         " number of command lines stored in the history tables
set undolevels=500                      " number of levels of undo
set sessionoptions-=options             " don't store any options and mappings (global and local values)

set splitright                          " open new vertical split windows to the right of the current one, not the left
set splitbelow                          " same as above - opens new windows below, not above
set wildignorecase                      " ignore case when completing file names and directories
set wildmenu                            " enable enhanced command-line completion
set wildmode=longest,list,full          " file and directory matching mode
set notitle                             " don't set xterm window title
set nrformats=hex                       " allow incrementing and decrementing numbers that start with 0 using <c-a> and <c-x>
set clipboard=unnamedplus,autoselect    " use + register (X Window clipboard) as unnamed register"
set viminfo='100,<1000,s10,h            " large registers (for copying between sessions)

set guifont=Monospace\ 9                " font in gvim

" Environment
set runtimepath^=$XDG_CONFIG_HOME/vim
set runtimepath+=$XDG_DATA_HOME/vim
set runtimepath+=$XDG_CONFIG_HOME/vim/after

set packpath^=$XDG_DATA_HOME/vim,$XDG_CONFIG_HOME/vim
set packpath+=$XDG_CONFIG_HOME/vim/after,$XDG_DATA_HOME/vim/after

let g:netrw_home = $XDG_DATA_HOME."/vim"
call mkdir($XDG_DATA_HOME."/vim/spell", 'p')
set viewdir=$XDG_DATA_HOME/vim/view | call mkdir(&viewdir, 'p')

set backupdir=$XDG_CACHE_HOME/vim/backup | call mkdir(&backupdir, 'p')
set directory=$XDG_CACHE_HOME/vim/swap   | call mkdir(&directory, 'p')
set undodir=$XDG_CACHE_HOME/vim/undo     | call mkdir(&undodir,   'p')

if !has('nvim') | set viminfofile=$XDG_CACHE_HOME/vim/viminfo | endif

" Load pathogen.vim (manage runtime path)
runtime bundle/vim-pathogen/autoload/pathogen.vim
execute pathogen#infect()

filetype plugin on                      " load file type plugins
filetype indent on                      " load file type based indentation
" disable file type based indentation for cmake files  https://superuser.com/a/865581
autocmd FileType cmake let b:did_indent = 1
autocmd FileType cmake setlocal indentexpr=

" syntax highlighting only when not in vimdiff
if !&diff
    syntax on
endif


" colorscheme
if &t_Co < 256
    colorscheme desert                  " colorscheme for the 8 color linux term
else
    let g:solarized_termcolors=256
"    if strftime('%H') >= 7 && strftime('%H') < 19
"        set background=light
"        colorscheme github
"    else
        set background=dark
        colorscheme solarized
"    endif
endif


" Map keys to toggle functions
function! MapToggle(key, opt)
    let cmd = ':set '.a:opt.'! \| set '.a:opt."?\<CR>"
    exec 'nnoremap '.a:key.' '.cmd
    exec 'inoremap '.a:key." \<C-O>".cmd
endfunction
command! -nargs=+ MapToggle call MapToggle(<f-args>)

" Keys & functions
MapToggle <F4> number
MapToggle <F5> spell
MapToggle <F6> paste
MapToggle <F7> hlsearch
MapToggle <F8> wrap

" Map F1 to Esc instead of the stupid help crap
inoremap <F1> <ESC>
nnoremap <F1> <ESC>
vnoremap <F1> <ESC>

" space bar un-highligts search
:noremap <silent> <Space> :silent noh<Bar>echo<CR>

" Make a curly brace automatically insert an indented line
"inoremap {<CR> {<CR>}<Esc>O<BS><Tab>

" Make jj exit insert mode (since it's almost never typed normally)
"imap jj <Esc>:w<CR>
"imap kk <Esc>:w<CR>
imap jj <Esc>
imap kk <Esc>

" Tab navigation
nnoremap <C-h> :tabprevious<CR>
nnoremap <C-l> :tabnext<CR>
nnoremap <C-p> :tabprevious<CR>
nnoremap <C-n> :tabnext<CR>
nnoremap <C-Left> :tabprevious<CR>
nnoremap <C-Right> :tabnext<CR>
nnoremap <silent> <C-S-Left> :execute 'silent! tabmove ' . (tabpagenr()-2)<CR>
nnoremap <silent> <C-S-Right> :execute 'silent! tabmove ' . (tabpagenr()+1)<CR>


" jumps to the last known position in a file just after opening it
autocmd BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g`\"" | endif

" automatic absolute/relative numbers toggling
"set relativenumber
"autocmd InsertEnter * :set number
"autocmd InsertLeave * :set relativenumber

" Don't screw up folds when inserting text that might affect them, until
" leaving insert mode. Foldmethod is local to the window. Protect against
" screwing up folding when switching between windows.
" ref: http://vim.wikia.com/wiki/Keep_folds_closed_while_inserting_text
autocmd InsertEnter * if !exists('w:last_fdm') | let w:last_fdm=&foldmethod | setlocal foldmethod=manual | endif
autocmd InsertLeave,WinLeave * if exists('w:last_fdm') | let &l:foldmethod=w:last_fdm | unlet w:last_fdm | endif

" force wrapping of long lines in diff mode
autocmd FilterWritePre * if &diff | setlocal wrap< | endif

" Removes trailing whitespace
function TrimWhiteSpace()
    %s/\s\+$//e
endfunction
map <F2> :call TrimWhiteSpace()<CR>

" LaTeX configuration
let g:tex_flavor = "latex"              " treat all *.tex files as LaTeX by default
let g:tex_comment_nospell = 1           " disable spell checking in comments
let g:tex_fast = "bMpr"                 " selectively enable region-based syntax highlighting, see :h tex_fast
let g:tex_no_error = 1                  " disable lexical error checking
let g:tex_subscripts = "[]"             " disable syntax-based concealment of subscripts
let g:tex_superscripts = "[]"           " disable syntax-based concealment of superscripts
let g:tex_isk = '48-57,a-z,A-Z,192-255,:,_' " TODO: testing workaround for vimtex issue #167

" spell checking
set spelllang=en_gb,cs                                  " real English spelling
set dictionary+=/usr/share/dict/words                   " use standard dictionary
set spellfile=$XDG_CONFIG_HOME/vim/spell/en.utf-8.add   " my whitelist
autocmd FileType tex,text,markdown,mediawiki,rst setlocal spell
autocmd FileType help setlocal nospell    " help pages are first recognized as 'text' and then set to 'help'


" YouCompleteMe config, see https://github.com/Valloric/YouCompleteMe#options
"let g:ycm_min_num_of_chars_for_completion = 99          " turn off identifier completer
let g:ycm_autoclose_preview_window_after_insertion = 1
let g:ycm_filetype_whitelist = { 'python': 1, 'c': 1, 'cpp': 1 }
" disable documentation popups https://github.com/ycm-core/YouCompleteMe#the-gycm_auto_hover-option
let g:ycm_auto_hover = ""
let g:ycm_filter_diagnostics = {
  \ "cpp": {
  \      "regex": [ "Maximum number of diagnostics exceeded",
  \                 "Using decl '.+' is unused",
  \                 "Unused function '.+'",
  \                 "Function '.+' is not needed and will not be emitted",
  \      ],
  \    }
  \ }
nnoremap <C-f> :YcmCompleter FixIt<CR>


" Syntax based folding for C-family languages
autocmd FileType c,cpp setlocal foldmethod=syntax
autocmd FileType c,cpp setlocal foldnestmax=2
" open all folds by default in tex files
autocmd FileType tex normal zR


" syntax highlighting for Python: https://github.com/hdima/python-syntax
let python_highlight_all = 1


" vim-latex config
let g:vimtex_fold_preamble = 0                  " disable folds in preamble
let g:vimtex_fold_envs = 0                      " disable folds for environments
let g:vimtex_indent_enabled = 0                 " disable indentation function
let g:vimtex_imaps_enabled = 0
"let g:vimtex_view_method = 'mupdf'
let g:vimtex_view_method = 'general'
let g:vimtex_view_general_viewer = 'qpdfview'
let g:vimtex_view_general_options = '--unique @pdf\#src:@tex:@line:@col'
let g:vimtex_view_general_options_latexmk = '--unique'
"let g:vimtex_view_general_viewer = 'zathura'
"let g:vimtex_view_general_options = '--synctex-forward @line:@col:@tex @pdf -x "@vim --servername @servername --remote +\%{line} \%{input}"'
"let g:vimtex_view_general_options_latexmk = '-x "@vim --servername @servername --remote +\%{line} \%{input}" \%S'
let g:vimtex_latexmk_continuous = 1             " run latexmk in continuous mode
let g:vimtex_latexmk_build_dir = './out/'       " output directory
"let g:vimtex_latexmk_enabled = 0
let g:vimtex_latexmk_background = 1
nnoremap <localleader>lm :VimtexCompileSS<cr>
let g:vimtex_quickfix_ignored_warnings = [
    \ 'Package hyperref Warning: Draft mode on.',
    \ 'LaTeX Warning: Marginpar',
    \ 'Underfull',
    \ 'Overfull',
    \ 'LaTeX Warning: Command \\@parboxrestore  has changed.',
    \ 'PDF inclusion: multiple pdfs with page group included in a single page',
    \ 'Token not allowed in a PDF string (Unicode)',
    \ "Using preliminary 'polyglossia' interface",
    \ ]

" latex completion
let g:vimtex_complete_recursive_bib = 1         " needed to search .bib files recursively, even in files included with \input
let g:ycm_filetype_whitelist.tex = 1
if !exists('g:ycm_semantic_triggers')
    let g:ycm_semantic_triggers = {}
endif
let g:ycm_semantic_triggers.tex = g:vimtex#re#youcompleteme
" FIXME: global variable specific to filetype, really?!?
autocmd FileType tex let g:ycm_min_num_of_chars_for_completion = 99

" nested highlighting with the minted package
let g:vimtex_syntax_minted = [
    \ {
    \   'lang' : 'cpp',
    \ }
    \ ]

" alternative to rubber: http://stackoverflow.com/questions/1240037/recommended-build-system-for-latex/1394702#1394702
"autocmd FileType tex set makeprg=rubber-info\ main.log
"autocmd FileType tex set errorformat=%f:%l:\ %m
autocmd FileType tex map <C-m> :make<CR>


" syntastic
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_mode_map = {
    \ "mode": "passive",
    \ }
"    \ "active_filetypes": ["python"],
let g:syntastic_python_checkers = ["pylint"]
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 2               " localion list behaviour: 0 - don't open nor close automatically, 1 - open and close, 2 - close but don't open
" TODO: don't run when vim is about to quit (:q), run checkers in background


" textwidth
autocmd FileType gitcommit setlocal textwidth=72
autocmd FileType rst setlocal textwidth=80
